intersection

{
    "feature1": {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-104.99404, 39.75621],
                    [-104.99404, 39.74621],
                    [-104.98404, 39.74621],
                    [-104.98404, 39.75621],
                    [-104.99404, 39.75621]
                ]
            ]
        },
        "properties": {
            "name": "Polygon 1"
        }
    },
    "feature2": {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-104.99004, 39.75221],
                    [-104.99004, 39.74221],
                    [-104.98004, 39.74221],
                    [-104.98004, 39.75221],
                    [-104.99004, 39.75221]
                ]
            ]
        },
        "properties": {
            "name": "Polygon 2"
        }
    }
}


buffer

{
    "feature": {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-104.99404, 39.75621],
                    [-104.99404, 39.74621],
                    [-104.98404, 39.74621],
                    [-104.98404, 39.75621],
                    [-104.99404, 39.75621]
                ]
            ]
        },
        "properties": {
            "name": "Example Polygon"
        }
    },
    "distance": 10.0
}

near

curl -X POST http://localhost:5000/processes/near/jobs -H "Content-Type: application/json" -d '{
    "feature": {
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [-104.99404, 39.75621]
        },
        "properties": {
            "name": "Example Point"
        }
    },
    "collection": [
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [-104.98404, 39.74621]
            },
            "properties": {
                "name": "Point 1"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [-104.97404, 39.73621]
            },
            "properties": {
                "name": "Point 2"
            }
        }
    ]
}'


differnce

{
    "feature1": {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-104.99404, 39.75621],
                    [-104.99404, 39.74621],
                    [-104.98404, 39.74621],
                    [-104.98404, 39.75621],
                    [-104.99404, 39.75621]
                ]
            ]
        },
        "properties": {
            "name": "Polygon 1"
        }
    },
    "feature2": {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-104.99004, 39.75221],
                    [-104.99004, 39.74221],
                    [-104.98004, 39.74221],
                    [-104.98004, 39.75221],
                    [-104.99004, 39.75221]
                ]
            ]
        },
        "properties": {
            "name": "Polygon 2"
        }
    }
}



# routes.py
from flask import Flask, jsonify, request, Response
from config import COLLECTIONS_CONFIG
from data_loader import load_data_from_sql, load_data_from_geojson, simplify_geojson
import os
from jobs import create_job, get_job_status
import gzip
import json
from cache import cache_geojson, get_cached_geojson

app = Flask(__name__)

def initialize_routes(app):
    # OGC Features Routes
    @app.route("/collections", methods=["GET"])
    def get_collections():
        collections = [{"id": collection["id"], "title": collection["id"]} for collection in COLLECTIONS_CONFIG["collections"]]
        return jsonify(collections)
    
    @app.route("/conformance", methods=["GET"])
    def get_conformance():
        return jsonify({
            "conformsTo": [
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core",
                "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson"
            ]
        })

    @app.route("/collections/<collection_id>", methods=["GET"])
    def get_collection(collection_id):
        collection = next((c for c in COLLECTIONS_CONFIG["collections"] if c["id"] == collection_id), None)
        if not collection:
            return jsonify({"error": "Collection not found"}), 404
        return jsonify({"id": collection_id, "title": collection_id, "description": f"Collection from {collection['type']} source."})

    @app.route("/collections/<collection_id>/items", methods=["GET"])
    def get_features(collection_id):
        cache_key = f"{collection_id}_features"
        cached_data = get_cached_geojson(cache_key)
        if cached_data:
            compressed_data = gzip.compress(json.dumps(cached_data).encode('utf-8'))
            return Response(compressed_data, content_type='application/json', headers={'Content-Encoding': 'gzip'})
        
        collection = next((c for c in COLLECTIONS_CONFIG["collections"] if c["id"] == collection_id), None)
        if not collection:
            return jsonify({"error": "Collection not found"}), 404
        # Add logic to load data from the appropriate source
        if collection["type"] == "geojson":
            features = load_data_from_geojson(collection["file_path"])
        elif collection["type"] == "sql":
            features = load_data_from_sql(collection["connection_string"], collection["table"])
        else:
            return jsonify({"error": "Unsupported collection type"}), 400
        
        simplified_features = simplify_geojson(features)
        cache_geojson(cache_key, simplified_features)
        compressed_data = gzip.compress(json.dumps(simplified_features).encode('utf-8'))
        return Response(compressed_data, content_type='application/json', headers={'Content-Encoding': 'gzip'})

    @app.route("/collections/<collection_id>/items/<feature_id>", methods=["GET"])
    def get_feature_by_id(collection_id, feature_id):
        collection = next((c for c in COLLECTIONS_CONFIG["collections"] if c["id"] == collection_id), None)
        if not collection:
            return jsonify({"error": "Collection not found"}), 404
        # Add logic to load data from the appropriate source
        if collection["type"] == "geojson":
            features = load_data_from_geojson(collection["file_path"])
        elif collection["type"] == "sql":
            features = load_data_from_sql(collection["connection_string"], collection["table"])
        else:
            return jsonify({"error": "Unsupported collection type"}), 400
        
        feature = next((f for f in features["features"] if f["properties"]["id"] == int(feature_id)), None)
        if not feature:
            return jsonify({"error": "Feature not found"}), 404
        return jsonify(feature)

    # OGC Processes Routes
    @app.route("/processes", methods=["GET"])
    def get_processes():
        return jsonify([
            {
                "id": "buffer",
                "title": "Buffer Process",
                "description": "Buffers geometries by a given distance."
            },
            {
                "id": "intersection",
                "title": "Intersection Process",
                "description": "Finds the intersection of two geometries."
            },
            {
                "id": "difference",
                "title": "Difference Process",
                "description": "Finds the difference between two geometries."
            },
            {
                "id": "near",
                "title": "Near Process",
                "description": "Finds the nearest feature in a collection to the input feature."
            }
        ])

    @app.route("/processes/buffer/jobs", methods=["POST"])
    def create_buffer_job():
        input_data = request.json
        job_id = create_job("buffer", input_data)
        return jsonify({"job_id": job_id, "status": "running"})

    @app.route("/processes/intersection/jobs", methods=["POST"])
    def create_intersection_job():
        input_data = request.json
        job_id = create_job("intersection", input_data)
        return jsonify({"job_id": job_id, "status": "running"})

    @app.route("/processes/difference/jobs", methods=["POST"])
    def create_difference_job():
        input_data = request.json
        job_id = create_job("difference", input_data)
        return jsonify({"job_id": job_id, "status": "running"})

    @app.route("/processes/near/jobs", methods=["POST"])
    def create_near_job():
        input_data = request.json
        job_id = create_job("near", input_data)
        return jsonify({"job_id": job_id, "status": "running"})

    @app.route("/jobs/<job_id>", methods=["GET"])
    def get_job(job_id):
        job = get_job_status(job_id)
        return jsonify(job)

    # OGC Styles Routes
    @app.route("/styles", methods=["GET"])
    def get_styles():
        return jsonify([{"id": "example_style", "title": "Example Style"}])

    @app.route("/styles/<style_id>", methods=["GET"])
    def get_style(style_id):
        if style_id != "example_style":
            return jsonify({"error": "Style not found"}), 404
        return jsonify({"style": "Returned style"})